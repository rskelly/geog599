Application notes:

- The lidar is pre-processed into a y-z planar point cloud, with y as the distance from a selected origin. The x is collapsed.
- As the "vehicle" travels in y at a given speed (say, 5m/s), it is represented as a triangular block (with the laser angled down, 
forming the hypothenuse) that consumes the points in the block. The point frequency is dictated by the vehicle speed and the point
density.



If the vehicle altitude is 10m, the range is 100m, then the downward angle to maximise the forward reach is,

asin(alt / range) = 0.1002 rad, or 5.7392 deg

The forward reach is then

10 / tan(asin(alt / range)) = 99.4987m

A table of altitudes/angles/ranges:

altitude,range,angle_rad,angle_deg,distance
10.0,100.0,0.1001674211615598,5.739170477266787,99.498743710662
15.0,100.0,0.15056827277668602,8.626926558678639,98.86859966642595
20.0,100.0,0.2013579207903308,11.536959032815489,97.97958971132712
25.0,100.0,0.25268025514207865,14.477512185929923,96.82458365518544
30.0,100.0,0.3046926540153975,17.457603123722095,95.39392014169457
35.0,100.0,0.35757110364551026,20.487315114722662,93.67496997597598
40.0,100.0,0.41151684606748806,23.578178478201835,91.65151389911678
45.0,100.0,0.4667653390472964,26.743683950403007,89.30285549745876
50.0,100.0,0.5235987755982989,30.000000000000004,86.60254037844385

The laser scans through a constant angle. The ground width of the swath is given by,

range * sweep angle

The density of the point cloud is proportional to the swath width.

A partial table of altitudes, angles, and swath widths. 

altitude,range,angle_rad,angle_deg,swath
10.0,100.0,0.008726646259971648,0.5,0.8726646259971648
10.0,100.0,0.017453292519943295,1.0,1.7453292519943295
10.0,100.0,0.02617993877991494,1.5,2.617993877991494
10.0,100.0,0.03490658503988659,2.0,3.490658503988659
10.0,100.0,0.04363323129985824,2.5,4.363323129985823
...
50.0,100.0,0.17453292519943295,10.0,17.453292519943293
50.0,100.0,0.2617993877991494,15.0,26.17993877991494
50.0,100.0,0.3490658503988659,20.0,34.906585039886586
50.0,100.0,0.5235987755982988,30.0,52.35987755982988

It would appear that a scan angle of 1-2 degrees would be ideal. It might not be prudent to scan at all.


profile_extract.py loads a las file and creates a profile of the given swath width through the point cloud, saves it to a csv file. This
represents the simulated output of a scanning laser in a straight line through the terrain.


Objective: 
1) Develop a series of splines over each point profile, with different weight and smoothness parameters.
2) Measure the deviation of the spline from the terrain model at regular intervals.
3) Characterize the power requirements for each trajectory.








Define an area within which all points are final.
The area is bounded by everthing behind (in y) the vehicle, and everything below (z) the vehicle.

----------- v
            |
 safe       |  ---> direction
            |

The vehicle is never "safe" until the surface has passed behind it. We can theorize a zone of decreasing
safety extending in front of the vehicle.

----------- v
            |  \
 safe       |      \					---> direction
            |          \

At the lower-right point of the triangle, we're very unsure of the safety of the surface, because 
items may exist above the path of the laser. As the vehicle moves forward, a higher, nearer
part of the laser intersects any higher surface features. If the laser intercepts a feature
at the vehicle itself (range zero) the vehicle has crashed. Somewhere within the triangle, 
the pointset must be finalized so that an invariant trajectory can be formed. For example,
we could say that behing 1/2 the length of the ground distance between the vehicle and the ground/beam
intersection (on flat terrain), the point set is finalized. Any points that appear in this 
zone after finalization constitute an obstacle, resulting in evasive manouvring.



Add to the final region, an area in front of the vehicle. Since the laser is angled down and forward,
it is impossible to know whether the pointset is "safe" until 