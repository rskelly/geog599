- minimize/stabilize geometric scale distortion, along and across track
- minimize/stabilize point density variation (same as scale)
- maximize/stabilize SNR
- minimize battery usage

- requirements
	- constant altitude
	- constant ground speed of *swath*
	- it would be nice to maintain an instrument axis perpendicular to the across-track 
	  gradient, but this would require simultaneous roll and translation in y for the platform.
	  translations of this sort are probably not possible at the required speed, and would
	  cause a deviation from the planned trajectory.

- platform thrust and rotation vectors
	- thrust is always in line with the platform's z axis. platform rotates in y to direct thrust
	  rearward or forward to control velocity in y.
	- when grounded, thrust vector magnitude is zero; rotation vector is [0, 0, 0]
	- when hovering, thrust vector in body and intertial frames is [0, 0, >0], rotation vector is [0, 0, 0]
	- when moving, thrust vector in body frame is t0 = [0, 0, >0], inertial frame is t1 = [x > 0, y = 0, 0 < z < t0[2]]
		- the vector's x and y elements are a result of pitch and roll.
		- when pitch != 0, some part of thrust contributes to acceleration in x, and some in z
		- since the 2d motion of the platform is dictated by pitch and thrust, and climbing requires the 
		  addition of thrust, the climbing thrust also imparts some force to forward motion, which increases
		  velocity in x. 
		- the x velocity of the platform can be maintained during climb by adjusting the pitch and thrust.
		- however, the platform motion isn't important, what's important is the velocity of the ground swath, so the
		  pitch and thrust have to be optimized to to maintain ground swath velocity irrespective of the platform velocity. 
		- however, pitch adjustments imply along-track scale distortion within integrations, so pitch changes must
		  be minimized.
			- we have three(?) inputs:
				1) thrust 
				2) pitch
				3) terrain?
			- we have four primary constraints
				1) minimize altitude error w/r/t planned altitude
				2) minimize ground swath velocity error w/r/t planned velocity
				3) minimize pitch error w/r/t pitch in level flight on flat ground
				4) minimize thrust (i.e. battery usage)
		- suspect that there is only one pitch/thrust combination for a given trajectory/velocity.
		- it appears as though there will be a global optimum for the pitch/thrust combination given the terrain, 
		  mission objectives and constraints. however, it may be that there is more than one optimimum for some
		  constraints, one of which satisfies the remaining constraints. for example, what if there are more than 
		  one conditions that satisfy 1, 2 and 3, but only one of those satisifies 4. what if the best solution to
		  4 is not the best for 3, but satisfies 1 and 2 as well as any other?

- the DJI flight control API allows low-level inputs such as pitch, roll and thrust, and high-resolution
  telemetry that can be used to asses the current dynamic state of the platform. therefore a flight-control
  system can be designed that uses simplified dynamic equations to compute instructions to be sent to 
  the API, on the assumption that the flight-controller will handle the low-level adjustments to achieve the
  desired dynamic effect. 

  put another way, if we desire a pitch angle of q, and a thrust force of r, given the output of a model that requires this,
  we can send this instruction to the API and it will manage the low-level flight controls to achieve these parameters
  to the best of its ability. the deviation between the requested inputs and the actual platform behaviour will have to 
  be measured.

 - the motor axes are not aligned, and therefore the individual thrust vectors do not align. it will probably be necessary to 
   assume a single, unified thrust vector and allow the DJI computer to handle the individual thrust components.

- DJI 6010 motor characteristics - https://store.dji.com/product/e2000-standard-6010-motor
	- power peaks at around 3000rpm, efficiency at ~5800. power and efficiency intersect at around 4300.
- DJI e2000 pro specifications - https://www.dji.com/e2000/info
	- efficiency peaks at around 3400rpm, but thrust is less than half of maximum at this point. thrust,
	  current and input power peak at about 4300, with a small dip from peak efficiency. 
	- may be an opportunity to adjust trajectory to maximize efficiency without harming imagery metrics.
	

- surface reconstruction
	- there will be no surface reconstructon. though the laser scans back and forth, there is no affordable/precise/accurate
  	  way to measure it, so this will not be done (the hall effect encoder is pretty, but it has too much hysteresis.)
  	- the points measured by the laser will be collapsed into a plane along the y and z axes. this will constitute the
  	  "surface" along which the vehicle flies. imagine the plan extruded in x for a solid representing the landscape.
  	- the surface hull is estimated by something approximating the alpha-shape (concave hull): the convex hull algorithm is used,
  	  but an upper-bound is placed by the length (in y) of a segment. a second pass identifies all locations where two vertices
  	  are nearer than this distance and the one with the larger z-coordinate is kept. the other is discarded.
  	- an interpolating cubic spline is used with the hull points to generate a curve parallel to the trajectory.

- trajectory spline
	- the spline traces the path through the points on the hull; offset, this serves as a prototype for the trajectory.
	- several types of splines exist -- weighted and constrained cubic splines reduce over-shoot at vertices where
	  a rapid change in trajectory occurs.

- the spline through binned or hull points traces what looks like an ideal path.
  	- because velocity in y must remain constant, the velocity in z will vary independently, along with the combined velocity.
  	- as the vehicle travels down the slope, its velocity must be constrained by thrust. it must anticipate the leveling-out
  	  by looking a certain distance ahead. this distance depends on the slope, the downward velocity, the change in slope
  	  and the amount of available thrust.
  	  

deprecated

- surface reconstruction
	- there are lots of ways to build surfaces from point clouds, some of them fast, some not.
 		- triangulation
 		- statistical
 		- etc.
 	- one obvious solution is to use alpha shapes
 		- we want to be able to limit the size of a "hole" that the vehicle will descend into; a suitably
 		  large alpha will do this.
 		- the underlying delaunay is reasonably fast
 	- how to reduce the density of points from which the triangulation is constructed?
 		- maybe it's possible to to a real-time clustering of points, in order to capture multiple
 		  returns from ground, and canopy structure, etc. use the size of the cluter to estimate
 		  its validity (i.e. n=0 signifies random noise)
 		- truncate the coordinates of a point and compute a hash. locate this hash in a set. if
 		  the slot is occupied, increment the slot's count, and update the raw coordinate values so that they
 		  can be averaged later. (simultaneously, maintain a map of points to times, and delete those which have expired.) 
 		  use these weighted points (filter them, probably) to generate the mesh.
 		- there's some stuff in the neuroimaging literature about correlating voxels (clusters of truncated points)
 		  to form contiguous regions that are then treated as whole.
 
 - or, avoid surface reconstruction all together and use a geostats approach.
 	- put the points in a data structure and use weighted interpolation to
 	  build a linear profile in the forward axis.
 	- develop a cubic spline which obeys the offset, with curvatures designed to satisfy the 
 	  constraints.

 - operating system
 	- raspian can be compiled with the realtime rt patch which enables realtime thread priority.
 	- the pi has 4 cores. it will be necessary to figure out how best to divide up the work, since 	 at this point there are several simulataneous demands
 	- see https://lemariva.com/blog/2018/07/raspberry-pi-preempt-rt-patching-tutorial-for-kernel-4-14-y for kernel compilation and important information about isolating CPUs, etc.